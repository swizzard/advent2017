module Day1 where

import Data.List (foldl')

cyc :: Integer -> String
cyc x = let s = show x in take (length s + 1) $ cycle s

makePairs :: Eq a => [a] -> [[a]]
makePairs [] = []
makePairs (a:[]) = []
makePairs (a:b:xs) | a == b = [a, b]:(makePairs (b:xs))
                   | otherwise = makePairs (b:xs)

splitS :: String -> [String]
splitS [] = []
splitS (c:cs) = [c]:splitS cs

sumPs :: [[String]] -> Int
sumPs = sum . map last . (map . map) read

input :: Integer
input

main = sumPs . map splitS . makePairs . cyc $ input

digitToInt :: Char -> Int
digitToInt = read . pure

cyc2 :: Integer -> [Int]
cyc2 = map digitToInt . cycle . show

intLen :: Integer -> Int
intLen n = truncate $ fromIntegral (length $ show n) / 2

makePairs2 :: [Int] -> Int -> [(Int, Int)]
makePairs2 cycled origL = [(cycled !! i, cycled !! (i + origL)) |
                           i <- [0..(2 * origL - 1)]]

sumPs2 :: [(Int, Int)] -> Int
sumPs2 xs = foldl' f 0 xs where
  f n (a, b) | a == b = n + a
             | otherwise = n


m2 x = let l = intLen x in sumPs2 $ makePairs2 (cyc2 x) l
main2 = m2 input
